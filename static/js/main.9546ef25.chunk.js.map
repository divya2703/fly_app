{"version":3,"sources":["components/Home.js","components/Time.js","components/Currency.js","components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","React","Component","Time","props","state","time","Date","toLocaleString","this","intervalID","setInterval","tick","clearInterval","setState","id","Currency","Data","names","axios","get","then","res","console","log","data","nameList","length","map","name","key","first","last","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yQAkBeA,G,6KAbX,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,aACb,0DAEF,yBAAKA,UAAY,QACb,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,gBAA5B,gB,GAROE,IAAMC,YC2CVC,E,kDAzCX,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAM,IAAIC,MAAOC,kBAHF,E,gEAME,IAAD,OAClBC,KAAKC,WAAaC,aAChB,kBAAM,EAAKC,SACX,O,6CAIFC,cAAcJ,KAAKC,c,6BAGnBD,KAAKK,SAAS,CACZR,MAAM,IAAIC,MAAOC,qB,+BAInB,OACE,yBAAKT,UAAU,aACX,yBAAMA,UAAU,aACd,sDACA,uBAAGA,UAAU,aAAb,eACeU,KAAKJ,MAAMC,KAD1B,MAKH,yBAAKP,UAAY,QAChB,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,eAAegB,GAAK,QAA/C,UACA,kBAAC,IAAD,CAAMf,GAAG,SAASD,UAAU,eAAegB,GAAK,QAAhD,gB,GAjCOd,IAAMC,WCoBVc,E,uKAjBP,OACE,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,aACb,wEACA,kDAEF,yBAAKA,UAAY,QAAO,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,gBAA3B,UAAxB,U,GARWG,a,iBCoDNe,E,4MAhDbZ,MAAQ,CACNa,MAAO,I,kEAGW,IAAD,OACjBC,IAAMC,IAAI,4EACPC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZ,EAAKR,SAAS,CACZI,MAAOI,EAAIG,Y,+BAIV,IACQP,EAAUT,KAAKJ,MAAtBa,MACFQ,EAAWR,EAAMS,OACrBT,EAAMU,KAAI,SAAAC,GACR,OACE,yBAAK9B,UAAU,YAAY+B,IAAKD,EAAKd,IACjC,yBAAKhB,UAAU,gBACX,uBAAGgB,GAAK,QAAQc,EAAKE,MAAM,IAAIF,EAAKG,WAMhD,yBAAKjC,UAAU,UACd,yBAAKA,UAAU,QAAf,IAAuB,0CAK1B,OACE,6BACE,yBAAKA,UAAU,kBACf,yBAAKA,UAAY,QACjB,yBAAKA,UAAU,aAAf,IAA4B,qDAC1B,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,eAAegB,GAAK,QAA/C,UACA,kBAAC,IAAD,CAAMf,GAAG,aAAaD,UAAU,eAAegB,GAAK,QAApD,WAGCW,Q,GA1CMxB,aCkBJ+B,E,uKAhBX,OACE,kBAAC,IAAD,KACE,yBAAKlC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,QAAQC,UAAWtC,IAC/B,kBAAC,IAAD,CAAOqC,KAAK,QAAQC,UAAWjC,IAC/B,kBAAC,IAAD,CAAOgC,KAAK,QAAQC,UAAWnB,IAC7B,kBAAC,IAAD,CAAOkB,KAAK,YAAYC,UAAWpB,W,GAV/Bd,aCIEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.9546ef25.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link} from 'react-router-dom'\r\nimport './button.css'\r\nclass Home extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"jumbotron\">\r\n          <h1> Welcome to the homepage!</h1>\r\n        </div>\r\n        <div className = \"btn1\">\r\n            <Link to=\"./Time\" className=\"btn btn-dark\">Page 2</Link>\r\n          </div>\r\n        </div>\r\n      \r\n    ); \r\n    }\r\n}\r\nexport default Home\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Link} from 'react-router-dom'\r\nimport './button.css'\r\n\r\nclass Time extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        time: new Date().toLocaleString()\r\n      };\r\n    }\r\n    componentDidMount() {\r\n      this.intervalID = setInterval(\r\n        () => this.tick(),\r\n        1000\r\n      );\r\n    }\r\n    componentWillUnmount() {\r\n      clearInterval(this.intervalID);\r\n    }\r\n    tick() {\r\n      this.setState({\r\n        time: new Date().toLocaleString()\r\n      });\r\n    }\r\n    render() {\r\n      return (\r\n        <div className=\"container\">\r\n            <div  className=\"jumbotron\">\r\n              <h1>The current time is : </h1>\r\n              <p className=\"App-clock\">\r\n                The time is {this.state.time}.\r\n              </p>\r\n            </div>\r\n           \r\n           <div className = \"div1\">\r\n            <Link to=\"/home\" className=\"btn btn-dark\" id = \"btn2\">Page 1</Link>\r\n            <Link to=\"./Data\" className=\"btn btn-dark\" id = \"btn3\">Page 3</Link>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\nexport default Time","import React, { Component } from 'react'\r\n// import axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\nimport './button.css'\r\n\r\nclass Currency extends Component{\r\n    render(){\r\n        return (\r\n          <div className=\"container\">\r\n            <div className=\"jumbotron\">\r\n              <h1> Welcome to the Currency Converter Page!</h1>\r\n              <h2> Still in build !</h2>\r\n            </div>\r\n            <div className = \"btn1\"><Link to=\"/home\" className=\"btn btn-dark\">Page 1</Link> </div>\r\n            \r\n            \r\n          </div>\r\n          \r\n        ); \r\n        }\r\n}\r\n\r\n\r\n// export default Currency\r\nexport default Currency","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\nimport './button.css'\r\n\r\n\r\n\r\n\r\nclass Data extends Component {\r\n    state = {\r\n      names: []\r\n    }\r\n   \r\n    componentDidMount(){\r\n      axios.get('https://randomapi.com/api/6de6abfedb24f889e0b5f675edc50deb?fmt=raw&sole ')\r\n        .then(res => {\r\n          console.log(res);\r\n          this.setState({\r\n            names: res.data\r\n          });\r\n        })\r\n    }\r\n    render(){\r\n      const { names: names } = this.state\r\n      const nameList = names.length ? (\r\n        names.map(name => {\r\n          return (\r\n            <div className=\"name card\" key={name.id}>\r\n                <div className=\"card-content\">\r\n                    <p id = \"name\">{name.first+\" \"+name.last}</p>\r\n                </div>\r\n            </div>\r\n          )\r\n        })\r\n      ) : (\r\n        <div className=\"center\">\r\n         <div className=\"div2\"> <h1> Loading</h1></div>\r\n           \r\n        </div>\r\n      );\r\n  \r\n      return (\r\n        <div>\r\n          <div className=\"container data\">\r\n          <div className = \"div1\">\r\n          <div className=\"jumbotron\"> <h1>Welcome to Datapage!</h1></div>\r\n            <Link to=\"/Time\" className=\"btn btn-dark\" id = \"btn2\">Page 2</Link>\r\n            <Link to=\"./Currency\" className=\"btn btn-dark\" id = \"btn3\">Page 4</Link>\r\n            </div>\r\n            \r\n            {nameList}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default Data","import React, { Component } from 'react';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Time from './components/Time'\nimport Currency from './components/Currency'\nimport Data from './components/Data'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Home}/>\n            <Route path='/home' component={Home}/>\n            <Route path='/time' component={Time} />\n            <Route path='/data' component={Data} />\n            { <Route path='/currency' component={Currency} />}\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}